services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solevaeg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: solevaeg_prod
      POSTGRES_USER: solevaeg_user
      POSTGRES_PASSWORD: SoLevAeG_2025_DB_Pass_A9f3Kz!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - solevaeg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solevaeg_user -d solevaeg_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: solevaeg-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    environment:
      - REDIS_PASSWORD=SoLevAeG_2025_Redis_Pass_Q7x2Lm!
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - solevaeg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.network-resilient
      target: production
    container_name: solevaeg-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: solevaeg_prod
      POSTGRES_USER: solevaeg_user
      POSTGRES_PASSWORD: SoLevAeG_2025_DB_Pass_A9f3Kz!
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: SoLevAeG_2025_Redis_Pass_Q7x2Lm!
      JWT_SECRET: SoLevAeG_2025_JWT_Secret_64Chars_9f8a7c6b5d4e3f2a1b0c9d8e7f6a5b4c3d2e1f0a9b8c7d6e5f4a3b2c1d0e9f8
      JWT_REFRESH_SECRET: SoLevAeG_2025_JWT_Refresh_64Chars_1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      PORT: 3001
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - solevaeg-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Frontend (React) - Production Build
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.network-resilient
      target: production
    container_name: solevaeg-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    volumes:
      - frontend_static:/usr/share/nginx/html:ro
    networks:
      - solevaeg-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile.network-resilient
      target: production
    container_name: solevaeg-admin
    restart: unless-stopped
    environment:
      NODE_ENV: production
    volumes:
      - admin_static:/usr/share/nginx/html:ro
    ports:
      - "3002:80"
    networks:
      - solevaeg-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_static:
    driver: local
  admin_static:
    driver: local

networks:
  solevaeg-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
