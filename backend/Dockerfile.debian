# Debian-based Dockerfile for Node.js backend (fallback option)
# Use this when Alpine repositories are having connectivity issues

# Base stage with Node.js 20 - using Debian for better package availability
FROM node:20-slim AS base
WORKDIR /app

# Update Debian repositories and install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Configure npm for faster, more reliable installs
RUN npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries 3 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-timeout 60000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set prefer-online true && \
    npm config set audit false && \
    npm config set fund false

# Install dependencies with simplified retry logic
COPY package*.json ./
RUN npm ci --omit=dev --no-audit --no-fund || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --omit=dev --no-audit --no-fund --no-optional)

# Development stage
FROM base AS development
ENV NODE_ENV=development
RUN npm ci --no-audit --no-fund || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --no-audit --no-fund --no-optional)
COPY . .
EXPOSE 3001
CMD ["npm", "run", "dev"]

# Build stage
FROM base AS build
ENV NODE_ENV=production
COPY package*.json ./
RUN npm ci --no-audit --no-fund || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --no-audit --no-fund --no-optional)
COPY . .
RUN npm run build

# Production stage
FROM node:20-slim AS production

# Install curl for health checks
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -g 1001 nodejs && \
    useradd -r -u 1001 -g nodejs backend

WORKDIR /app

# Copy built application
COPY --from=build --chown=backend:nodejs /app/dist ./dist
COPY --from=build --chown=backend:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=backend:nodejs /app/package.json ./package.json
COPY --from=build --chown=backend:nodejs /app/prisma ./prisma
COPY --chown=backend:nodejs start.sh ./start.sh

# Create necessary directories
RUN mkdir -p uploads logs && chown -R backend:nodejs uploads logs

USER backend

EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

CMD ["./start.sh"]