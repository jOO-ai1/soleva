# Base stage
FROM node:20-alpine3.19 AS base
WORKDIR /app

# Configure npm
RUN npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-timeout 120000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set prefer-online true && \
    npm config set audit false && \
    npm config set fund false && \
    npm config set maxsockets 15

# Install dependencies
COPY package*.json ./
RUN set -e && \
    for attempt in 1 2 3; do \
      if npm ci --include=dev --no-audit --no-fund; then break; \
      elif [ $attempt -eq 3 ]; then npm install --include=dev --no-audit --no-fund --no-optional; \
      else sleep 5; fi; \
    done

# Development stage
FROM base AS development
COPY . .
ENV NODE_ENV=development
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM base AS build
COPY . .
ENV NODE_ENV=production
RUN npm run build

# Production stage
FROM nginx:alpine3.19 AS production
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/dist /usr/share/nginx/html

# Non-root user
RUN addgroup -g 1001 -S nginx-user && adduser -S frontend -u 1001 -G nginx-user && \
    chown -R frontend:nginx-user /usr/share/nginx/html /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && chown -R frontend:nginx-user /var/run/nginx.pid
USER frontend

EXPOSE 80
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
