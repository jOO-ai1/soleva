# Optimized Multi-stage Dockerfile for React frontend

# Base stage with Node.js 20 - using Alpine 3.19 for better package availability
FROM node:20-alpine3.19 AS base
WORKDIR /app

# Configure npm for faster, more reliable installs
RUN npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries 3 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-timeout 60000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set prefer-online true && \
    npm config set audit false && \
    npm config set fund false

# Install dependencies with simplified retry logic
COPY package*.json ./
RUN npm ci --include=dev --no-audit --no-fund || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --no-audit --no-fund --no-optional)

# Development stage
FROM base AS development
ENV NODE_ENV=development
RUN npm ci --include=dev --no-audit --no-fund || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --no-audit --no-fund --no-optional)
COPY . .
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM base AS build
ENV NODE_ENV=production
COPY . .
# Install all dependencies including devDependencies for build
RUN npm ci --include=dev --no-audit --no-fund || \
    (echo "npm ci failed, trying npm install..." && \
     npm install --include=dev --no-audit --no-fund --no-optional)
# Verify Vite is available before building
RUN npx vite --version
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine3.19 AS production

# Update repositories and install curl for health checks with robust retry logic
RUN set -e && \
    # Try primary repositories first
    apk update --no-cache && \
    apk add --no-cache curl || \
    (echo "Primary curl install failed, trying alternative mirrors..." && \
     # Try multiple Alpine mirrors with retries
     for mirror in "https://dl-cdn.alpinelinux.org/alpine/v3.19" "https://mirror.yandex.ru/mirrors/alpine/v3.19" "https://mirrors.aliyun.com/alpine/v3.19" "https://mirror.leaseweb.com/alpine/v3.19"; do \
       echo "Trying mirror: $mirror" && \
       echo "$mirror/main" > /etc/apk/repositories && \
       echo "$mirror/community" >> /etc/apk/repositories && \
       if apk update --no-cache && apk add --no-cache curl; then \
         echo "Successfully installed curl from $mirror" && \
         break; \
       else \
         echo "Failed to install curl from $mirror, trying next mirror..." && \
         sleep 2; \
       fi; \
     done)

# Copy custom nginx config
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S frontend -u 1001 -G nginx-user && \
    chown -R frontend:nginx-user /usr/share/nginx/html /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R frontend:nginx-user /var/run/nginx.pid

USER frontend

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
