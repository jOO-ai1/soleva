# Multi-stage Dockerfile for React frontend

# Base stage with Node.js
FROM node:18-alpine3.18 AS base
WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Development stage
FROM base AS development
ENV NODE_ENV=development
RUN npm ci
COPY . .
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM base AS build
ENV NODE_ENV=production
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine AS production

# Install curl for health checks with retry logic and alternative repositories
RUN for i in 1 2 3; do \
        apk update --no-cache && \
        apk add --no-cache curl && \
        break || \
        (echo "Attempt $i failed, retrying..." && sleep 5); \
    done || \
    (echo "Using alternative repository..." && \
     sed -i 's/dl-cdn.alpinelinux.org/mirror.yandex.ru\/mirrors\/alpine/g' /etc/apk/repositories && \
     apk update --no-cache && \
     apk add --no-cache curl)

# Copy custom nginx config
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx-user
RUN adduser -S frontend -u 1001 -G nginx-user

# Change ownership of nginx files
RUN chown -R frontend:nginx-user /usr/share/nginx/html
RUN chown -R frontend:nginx-user /var/cache/nginx
RUN chown -R frontend:nginx-user /var/log/nginx
RUN chown -R frontend:nginx-user /etc/nginx/conf.d
RUN touch /var/run/nginx.pid
RUN chown -R frontend:nginx-user /var/run/nginx.pid

USER frontend

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
