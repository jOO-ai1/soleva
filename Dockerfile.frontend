# Multi-stage Dockerfile for React frontend

# Base stage with Node.js
FROM node:18-alpine3.18 AS base
WORKDIR /app

# Configure npm for better reliability with multiple strategies
RUN npm config set fetch-retry-mintimeout 30000 && \
    npm config set fetch-retry-maxtimeout 300000 && \
    npm config set fetch-retries 10 && \
    npm config set fetch-retry-factor 1.5 && \
    npm config set fetch-timeout 300000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set cache-max 0 && \
    npm config set prefer-offline false

# Install dependencies with aggressive retry logic and fallback strategies
COPY package*.json ./
RUN for strategy in "npm ci --omit=dev" "npm install --omit=dev --no-optional" "npm install --omit=dev --legacy-peer-deps"; do \
        echo "Trying strategy: $strategy"; \
        for i in 1 2 3; do \
            echo "Attempt $i for strategy: $strategy"; \
            if timeout 600 $strategy; then \
                echo "Strategy $strategy succeeded on attempt $i"; \
                npm cache clean --force; \
                break 2; \
            else \
                echo "Strategy $strategy attempt $i failed, retrying..."; \
                sleep 15; \
            fi; \
        done; \
        echo "Strategy $strategy failed all attempts, trying next..."; \
        sleep 10; \
    done || (echo "All npm strategies failed, trying with alternative registry..." && \
             npm config set registry https://registry.npmmirror.com/ && \
             npm install --omit=dev --no-optional)

# Development stage
FROM base AS development
ENV NODE_ENV=development
RUN for strategy in "npm ci" "npm install --no-optional" "npm install --legacy-peer-deps"; do \
        echo "Trying dev strategy: $strategy"; \
        for i in 1 2 3; do \
            echo "Dev attempt $i for strategy: $strategy"; \
            if timeout 600 $strategy; then \
                echo "Dev strategy $strategy succeeded on attempt $i"; \
                break 2; \
            else \
                echo "Dev strategy $strategy attempt $i failed, retrying..."; \
                sleep 15; \
            fi; \
        done; \
        echo "Dev strategy $strategy failed all attempts, trying next..."; \
        sleep 10; \
    done
COPY . .
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM base AS build
ENV NODE_ENV=production
COPY package*.json ./
RUN for strategy in "npm ci" "npm install --no-optional" "npm install --legacy-peer-deps"; do \
        echo "Trying build strategy: $strategy"; \
        for i in 1 2 3; do \
            echo "Build attempt $i for strategy: $strategy"; \
            if timeout 600 $strategy; then \
                echo "Build strategy $strategy succeeded on attempt $i"; \
                break 2; \
            else \
                echo "Build strategy $strategy attempt $i failed, retrying..."; \
                sleep 15; \
            fi; \
        done; \
        echo "Build strategy $strategy failed all attempts, trying next..."; \
        sleep 10; \
    done
COPY . .
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine AS production

# Install curl for health checks with retry logic and alternative repositories
RUN for i in 1 2 3; do \
        apk update --no-cache && \
        apk add --no-cache curl && \
        break || \
        (echo "Attempt $i failed, retrying..." && sleep 5); \
    done || \
    (echo "Using alternative repository..." && \
     sed -i 's/dl-cdn.alpinelinux.org/mirror.yandex.ru\/mirrors\/alpine/g' /etc/apk/repositories && \
     apk update --no-cache && \
     apk add --no-cache curl)

# Copy custom nginx config
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx-user
RUN adduser -S frontend -u 1001 -G nginx-user

# Change ownership of nginx files
RUN chown -R frontend:nginx-user /usr/share/nginx/html
RUN chown -R frontend:nginx-user /var/cache/nginx
RUN chown -R frontend:nginx-user /var/log/nginx
RUN chown -R frontend:nginx-user /etc/nginx/conf.d
RUN touch /var/run/nginx.pid
RUN chown -R frontend:nginx-user /var/run/nginx.pid

USER frontend

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
