services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solevaeg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-solevaeg_db}
      POSTGRES_USER: ${POSTGRES_USER:-solevaeg}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - solevaeg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-solevaeg} -d ${POSTGRES_DB:-solevaeg_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: solevaeg-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - solevaeg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
      args:
        BUILDKIT_INLINE_CACHE: 1
      network: host
    container_name: solevaeg-backend
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - solevaeg-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Frontend (React) - Production Build
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: ${NODE_ENV:-production}
      args:
        BUILDKIT_INLINE_CACHE: 1
      network: host
    container_name: solevaeg-frontend
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - frontend_static:/usr/share/nginx/html:ro
    networks:
      - solevaeg-network
    depends_on:
      - backend
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
      args:
        BUILDKIT_INLINE_CACHE: 1
      network: host
    container_name: solevaeg-admin
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - admin_static:/usr/share/nginx/html:ro
    ports:
      - "${ADMIN_PORT:-3002}:3000"
    networks:
      - solevaeg-network
    depends_on:
      - backend
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: solevaeg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/letsencrypt:ro
      - ./docker/nginx/certbot-webroot:/var/www/certbot:ro
      - backend_uploads:/var/www/uploads:ro
      - frontend_static:/var/www/frontend:ro
      - nginx_logs:/var/log/nginx
    networks:
      - solevaeg-network
    depends_on:
      - frontend
      - backend
      - admin
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: solevaeg-certbot
    volumes:
      - ./docker/nginx/ssl:/etc/letsencrypt
      - ./docker/nginx/certbot-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN} -d api.${DOMAIN} -d admin.${DOMAIN}
    depends_on:
      - nginx
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_static:
    driver: local
  admin_static:
    driver: local
  nginx_logs:
    driver: local

networks:
  solevaeg-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
