version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: solevaeg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-solevaeg_db}
      POSTGRES_USER: ${POSTGRES_USER:-solevaeg}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - solevaeg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-solevaeg} -d ${POSTGRES_DB:-solevaeg_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: solevaeg-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - solevaeg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: solevaeg-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-solevaeg}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-solevaeg_db}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - /app/node_modules
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - solevaeg-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: ${NODE_ENV:-development}
    container_name: solevaeg-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=${VITE_API_URL:-http://localhost:3001/api/v1}
      - VITE_APP_NAME=Soleva
      - VITE_APP_URL=${VITE_APP_URL:-http://localhost:5173}
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./index.html:/app/index.html
      - ./package.json:/app/package.json
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./vite.config.ts:/app/vite.config.ts
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    networks:
      - solevaeg-network
    depends_on:
      - backend

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: solevaeg-admin
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=${VITE_API_URL:-http://localhost:3001/api/v1}
      - REACT_APP_NAME=Soleva Admin
    volumes:
      - ./admin/src:/app/src
      - ./admin/public:/app/public
      - /app/node_modules
    ports:
      - "${ADMIN_PORT:-3002}:3000"
    networks:
      - solevaeg-network
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: solevaeg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/letsencrypt:ro
      - ./docker/nginx/certbot-webroot:/var/www/certbot:ro
      - backend_uploads:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    networks:
      - solevaeg-network
    depends_on:
      - frontend
      - backend
      - admin
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: solevaeg-certbot
    volumes:
      - ./docker/nginx/ssl:/etc/letsencrypt
      - ./docker/nginx/certbot-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN} -d api.${DOMAIN} -d admin.${DOMAIN}
    depends_on:
      - nginx
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  solevaeg-network:
    driver: bridge
