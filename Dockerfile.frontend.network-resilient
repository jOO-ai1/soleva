# Network-resilient Debian-based Dockerfile for React frontend
# Handles DNS resolution issues and package repository connectivity problems

# Base stage with Node.js 20 - using Debian for better package availability
FROM node:20-slim AS base
WORKDIR /app

# Configure package mirrors for better connectivity (DNS is handled by Docker daemon)

# Configure npm for faster, more reliable installs with multiple registries
RUN npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-timeout 60000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set prefer-online true && \
    npm config set audit false && \
    npm config set fund false

# Install dependencies with enhanced retry logic
COPY package*.json ./
RUN i=1; while [ $i -le 3 ]; do \
      echo "npm install attempt $i/3"; \
      if npm ci --include=dev --no-audit --no-fund; then \
        echo "npm install successful"; \
        break; \
      elif [ $i -lt 3 ]; then \
        echo "npm install failed, retrying in $((i * 10)) seconds..."; \
        sleep $((i * 10)); \
      else \
        echo "npm ci failed, trying npm install..."; \
        npm install --include=dev --no-audit --no-fund --no-optional; \
      fi; \
      i=$((i + 1)); \
    done

# Development stage
FROM base AS development
ENV NODE_ENV=development
RUN i=1; while [ $i -le 3 ]; do \
      echo "npm install attempt $i/3"; \
      if npm ci --include=dev --no-audit --no-fund; then \
        echo "npm install successful"; \
        break; \
      elif [ $i -lt 3 ]; then \
        echo "npm install failed, retrying in $((i * 10)) seconds..."; \
        sleep $((i * 10)); \
      else \
        echo "npm ci failed, trying npm install..."; \
        npm install --include=dev --no-audit --no-fund --no-optional; \
      fi; \
      i=$((i + 1)); \
    done
COPY . .
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM base AS build
ENV NODE_ENV=production
COPY . .
# Install all dependencies including devDependencies for build
RUN i=1; while [ $i -le 3 ]; do \
      echo "npm install attempt $i/3"; \
      if npm ci --include=dev --no-audit --no-fund; then \
        echo "npm install successful"; \
        break; \
      elif [ $i -lt 3 ]; then \
        echo "npm install failed, retrying in $((i * 10)) seconds..."; \
        sleep $((i * 10)); \
      else \
        echo "npm ci failed, trying npm install..."; \
        npm install --include=dev --no-audit --no-fund --no-optional; \
      fi; \
      i=$((i + 1)); \
    done
# Verify Vite is available before building
RUN npx vite --version
RUN npm run build

# Production stage with Nginx
FROM nginx:stable AS production

# Install curl with retry logic (DNS is handled by Docker daemon)

RUN i=1; while [ $i -le 5 ]; do \
      echo "Package installation attempt $i/5"; \
      if apt-get update && apt-get install -y --no-install-recommends curl; then \
        echo "Package installation successful"; \
        break; \
      elif [ $i -lt 5 ]; then \
        echo "Package installation failed, retrying in $((i * 10)) seconds..."; \
        sleep $((i * 10)); \
      else \
        echo "All package installation attempts failed"; \
        exit 1; \
      fi; \
      i=$((i + 1)); \
    done && \
    rm -rf /var/lib/apt/lists/*

# Copy custom nginx config
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/dist /usr/share/nginx/html

# Create non-root user
RUN groupadd -g 1001 nginx-user && \
    useradd -r -u 1001 -g nginx-user frontend && \
    chown -R frontend:nginx-user /usr/share/nginx/html /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R frontend:nginx-user /var/run/nginx.pid

USER frontend

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
